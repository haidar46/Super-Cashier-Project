# -*- coding: utf-8 -*-
"""cashier fix.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-sBC6HAQlCx5kz2dv4tmQL01iUvNfuHI
"""

# Membuat Transaction class
class Transaction:

    def __init__(self):

        self.order_items = {}

        """
        Class Transaction digunakan sebagai parent class yang akan menyimpan
        atribut pemesanan seperti nama, jumlah, dan harga barang
        """

    # Membuat method add_item untuk memasukkan nama barang, jumlah barang dan harga barang
    def add_item(self, nama_barang, jumlah_barang, harga_barang):

        self.nama_barang = str(nama_barang).title()
        self.jumlah_barang = int(jumlah_barang)
        self.harga_barang = int(harga_barang)
        self.order_items[self.nama_barang] = [self.jumlah_barang, self.harga_barang]

        """
        Method ini untuk menambahkan detail barang yang ingin dipesan

        Parameter:
            nama_barang (str): nama barang yang ingin dipesan
            jumlah_barang (int): jumlah barang yang ingin dipesan
            harga_barang (int): harga barang yang ingin dipesan
        """

    # Membuat method show_order_table untuk menyajikan pesanan kedalam tabel
    def show_order_table(self) :

      order_table = []

      table_header = ['No','Nama Barang','Jumlah Barang', 'Harga Barang', 'Harga Total']

      order_table.append(table_header)

      n = 0

      for key, value in self.order_items.items():

        n += 1

        table_no = n

        nama_barang = key

        jumlah_barang = value[0]

        harga_barang = value[1]

        amount = jumlah_barang * harga_barang

        item_data = [table_no, nama_barang, jumlah_barang, harga_barang, amount]

        order_table.append(item_data)

        print(tabulate(order_table, tablefmt="fancy_grid"))

        """
        Method ini digunakan untuk menampilkan semua daftar belanjaan kedalam
        bentuk tabel, terdapat kolom Nomor, Nama Barang, Jumlah Barang,
        Harga Barang dan Harga Total
        """

    # Membuat method untuk mengganti nama barang
    def update_item_name(self, nama_barang, nama_barang_baru):

        self.nama_barang = str(nama_barang)
        self.nama_barang_baru = str(nama_barang_baru)
        self.order_items[self.nama_barang_baru] = self.order_items[self.nama_barang]
        del self.order_items[self.nama_barang]

        """
        Method ini digunakan untuk mengganti nama barang apabila ada kesalahan input

        Parameter:
            nama_barang (str): nama barang yang dipesan diawal
            nama_barang_baru (str): nama barang baru yang akan mengganti barang sebelumnya
        """

    # Membuat method untuk mengganti jumlah barang
    def update_item_quantity(self, nama_barang, jumlah_barang_baru):

        self.nama_barang = str(nama_barang)
        self.jumlah_barang_baru = int(jumlah_barang_baru)
        self.order_items[self.nama_barang][0] = self.jumlah_barang_baru

        """
        Method ini digunakan untuk mengganti jumlah barang apabila ada kesalahan input

        Parameter:
            nama_barang (str): nama barang yang dibeli
            jumlah_barang_baru (int): jumlah barang terbaru
        """

    # Membuat method untuk mengganti harga barang
    def update_item_price(self, nama_barang, harga_barang_baru):

        self.nama_barang = str(nama_barang)
        self.harga_barang_baru = int(harga_barang_baru)
        self.order_items[self.nama_barang][1] = self.harga_barang_baru

        """
        Method ini digunakan untuk mengganti jumlah barang apabila ada kesalahan input


        Parameter:
            nama_barang (str): name barang yang dibeli
            harga_barang_baru (int): harga barang terbaru
        """

    # Membuat method untuk menghapus barang pesanan
    def delete_item(self, nama_barang):

        self.nama_barang = str(nama_barang)
        del self.order_items[self.nama_barang]

        """
        Metode ini digunakan untuk menghapus salah satu barang yang sudah dipesan

        Parameter:
            nama_barang (str): name barang yang dibeli
        """

    # Membuat method untuk menghapus semua transaksi
    def reset(self):

        self.order_items.clear()
        print("Semua item berhasil di hapus!")

        """
        Method ini digunakan untuk menghapus semua barang yang sudah dipesan

        Return:
            Semua item berhasil di hapus
        """

    # Membuat method untuk mengecek input data
    def check_order(self):

        for key, value in self.order_items.items():

            nama_barang = key
            jumlah_barang = value[0]
            harga_barang = value[1]

            if type(nama_barang) != str:
                print("Terdapat kesalahan input data")
            elif type(jumlah_barang) != int:
                print("Terdapat kesalahan input data")
            elif type(harga_barang) != int:
                print("Terdapat kesalahan input data")
            else:
                print("Pemesanan sudah benar")

            """
            Method ini digunakan untuk mengecek apakah semua detail barang
            yang diinputkan sudah lengkap dan sesuai

            """
    # Membuat method untuk menghitung total belanja yang sudah dipesan
    def total_price(self):
        self.total_price = 0

        for value in self.order_items.values():
            jumlah_barang = value[0]
            harga_barang = value[1]
            self.total_price += (jumlah_barang * harga_barang)

        is_discounted, discount = self.is_discounted(self.total_price)
        self.final_price = self.total_price * (1 - discount)

        if is_discounted == True:
            print(f"Total belanja Anda: Rp {self.total_price}.")
            print(f"Anda mendapatkan diskon {discount * 100}%.")
            print(f"Anda hanya perlu membayar: Rp {self.final_price}.")

        else :
            print(f"Total belanja Anda: Rp {self.total_price}.")
            print(f"Belanja diatas Rp 200.000 untuk mendapatkan diskon.")

        """
        Method ini digunakan untuk menghitung total harga yang harus dibayar
        dari belanjaan yang sudah dipesan

        """

    # Membuat method untuk menghitung nilai diskon
    def is_discounted(self, total_price):
        self.total_price = total_price

        if self.total_price <= 200000:
            is_discounted = False
            discount = 0.0

        else :
            is_discounted = True
            if self.total_price > 500000:
              discount = 0.1
            if self.total_price > 300000 and self.total_price <= 500000:
              discount = 0.08
            if self.total_price > 200000 and self.total_price <= 300000:
              discount = 0.05

        return is_discounted, discount

        """
        Method ini digunakan untuk menghitung total diskon yang didapat oleh pembeli

        """
